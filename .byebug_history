c
date < @habit.created_at.to_date
@habit.created_at.to_date
date
c
checkin
c
(Date.today - created_at.to_date).to_i + 1
created_at.to_date
c
@habit = current_user.habits.find(params[:habit_id])
current_user.habits
c
checkin.persisted?
checkin = @habit.habit_checkins.find_or_initialize_by(date: date)
date = params[:date].present? ? Date.parse(params[:date]) : Date.today
params[:date].present? ? Date.parse(params[:date]) : Date.today
date = params[:date].present?
c
token = request.headers[:Token]&.split(" ")&.last
c
Tokenc
token
token = request.headers[:Token]&.split(" ")&.last
c
render json: {habit: ActiveModelSerializers::SerializableResource.new(habit, each_serializer: HabitSerializer) }, status: :ok
@habit
abit
c
habits = current_user.habits.includes(:habit_checkins)
c
habit.save
habit = current_user.habits.build(habit_params)
habit.save
habit_params
c
current_user
c
n
c
render json: { message: "Unauthorized User" }, status: :unauthorized unless @current_user
unless @current_user
@current_user
n
c
n
@current_user = User.find_by(id: decoded[:user_id])
n
return render json: { message: "Unauthorized User" }, status: :unauthorized unless decoded
decoded = jwt_decode(token)
token = request.headers[:Token]&.split(" ")&.last
c
decoded = jwt_decode(token)
 return render json: { message: "Unauthorized User" }, status: :unauthorized unless decoded
return render json: { message: "Token Expired" }, status: :unauthorized if decoded == :expired
token.present?
token = request.headers[:Token]&.split(" ")&.last
c
user.save
user
user = User.new(user_params)
c
user
user.reset_password!(params[:password])
params[:password]
c
passwords_match?
params[:password].blank?
params[:token].blank?
c
user.valid_password?(params[:password])
user.valid_password?
user = User.find_by(email: params[:email])
c
!user.authenticate(params[:password])
user.authenticate(params[:password])
user = User.find_by(email: params[:email])
c
user.authenticate(params[:password])
params[:password]
params
user.params[:password]
user
user.authenticate(params[:password])
user.nil?
user = User.find_by(email: params[:email])
c
user.save
user = User.new(user_params)
c
user.save!
user.save
user = User.new(user_params)
c
user.save
user = User.new(user_params)
c
user
usesr
user.save!
user.save
user = User.new(user_params)
user_params
c
